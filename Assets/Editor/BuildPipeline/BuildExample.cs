using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using UnityEditor.Build.Content;
using UnityEngine;

public static class BuildExample
{
    private static string buildPath = Application.dataPath + "/../Build";

    public static void CreateBuildFolder()
    {
        if (!System.IO.Directory.Exists(buildPath))
        {
            System.IO.Directory.CreateDirectory(buildPath);
        }
    }


    [MenuItem("Custom/Build")]
    public static void BuildMenu()
    {

        if (EditorUtility.DisplayDialog("build", "Win64用にビルドしますか?", "OK", "CANCEL"))
        {

            CreateBuildFolder();

            string[] scenes = GetEnabledScene();
            string fullPath = buildPath + "/" + BuildTarget.StandaloneWindows64 + "/" + "BuildExample.exe";

            BuildPipeline.BuildPlayer(scenes, fullPath, BuildTarget.StandaloneWindows64, BuildOptions.None);


            EditorUtility.DisplayDialog("build", "ビルドが完了しました。", "OK");

        }
    }


    private static string[] GetEnabledScene()
    {
        List<string> scenes = new List<string>();
        foreach (var s in EditorBuildSettings.scenes)
        {
            if(s.enabled) scenes.Add(s.path);
        }

        return scenes.ToArray();
    }


    //コマンドラインからのビルド対象のメソッドは、staticでないといけない
    public static int CommandBuild()
    {
        GenerateBuildInfo();
        
        
        string[] scenes = GetEnabledScene();
        string fullPath = buildPath + "/" + BuildTarget.StandaloneWindows64 + "/" + "BuildExample.exe";

        BuildPipeline.BuildPlayer(scenes, fullPath, BuildTarget.StandaloneWindows64, BuildOptions.None);

        //エラーの場合は、0以外の値を返す
        return 0;
    }

    private static void GenerateBuildInfo()
    {
        var date = System.DateTime.Now.ToString();
        var arg = System.Environment.GetCommandLineArgs()[System.Environment.GetCommandLineArgs().Length-1];

        string content = "";
        content += "namespace Build{\n";
        content += "\tpublic class BuildInfo {\n";
        content += string.Format($"\t\tpublic const string Date = \"{date}\";\n");
        content += string.Format($"\t\tpublic const string Arg = \"{arg}\";\n");
        content += "\t}";
        content += "}";

        string buildInfoPath = Application.dataPath + "/Scripts/Build/BuildInfo.Autogenerated.cs";
        System.IO.File.WriteAllText(buildInfoPath, content);

    }
    
    
    
    
}
